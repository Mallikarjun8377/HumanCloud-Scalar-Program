package DataStructure;

public class CustomStack {
	
	private int maxSize;
	private int[] stack;
	private int top;
		
	public CustomStack(int size) {
		maxSize=size;
		stack=new int[maxSize];
		top=-1;
	}
	public void push(int data) {
		if(!isfull()) {
			top++;
			stack[top]=data;			
		}else {
			resize(maxSize+1);
			push(data);	
		}
	}
	
//	public int pop() {
//		if(!isEmpty()) {
//			int res= stack[top];
//			top--;
//			return res;
			

			int pop(){
				if(!isEmpty());
				int res= stack[top];
				top--;
				return res;}

		
//		if(top<maxSize/2) {
//			resize(maxSize/2);
//			return pop();
//		}else {
//			System.out.println("The Stack is already empty");
//		return -1;
//		}
	}
	public int peak() {
		if(!isEmpty()) {
			return stack[top];
		}else {
			System.out.println("The Stack is Empty");
			return -1;
		}
	}
	private void resize(int newSize) {
		int[] newArray=new int[newSize];
		for(int i=0;i<stack.length;i++){
			newArray[i]=stack[i];
			stack=newArray;			
		}
		maxSize=newSize;
		}	

	public boolean isEmpty() {
		return (top==-1);
	}
	public boolean isfull() {
		return (top+1==maxSize);
	}
	public void makeEmpty() {
		top=-1;
	}
	public void show(){
		for(int n: stack) {
			System.out.print(n+" ");
	}
		
}
}



