package DataStructure;

public class LinkedList {
	
	Node head;
	int data;
	
	private LinkedList() {
		this.data=data;
	}

		
		public void insertAtEnd(int data) {
			Node node=new Node(data);
			node.data=data;
			node.next=null;
			
			if(head==null) {
				head=node;
			}else {
				Node temp=head;
				while(temp.next!=null)
				{
					temp=temp.next;
				}
				temp.next=node;
			}
		}
		public void insertAtStart(int data) {
			Node node=new Node(data);
			node.data=data;
			node.next=null;
			node.next=head;
			head=node;
		}
		public void insertAt(int index, int data) {
			Node node=new Node(data);
			node.data=data;
			node.next=null;
			
			if(index==0) {
				insertAtStart(data);
			}else {
				Node temp=head;
				for(int i=0;i<index-1;i++) {
					temp=temp.next;
				}
				node.next=temp.next;
				temp.next=node;
			}
		}
		public void deletAt(int index) {
			try {
				if(index==0) {
					head=head.next;
				}else {
					Node temp=head;
				    Node temp1=null;
				    for(int i=0; i<index-1;i++) {
				    	temp=temp.next;
				    }temp1=temp.next;
				    temp.next=temp1.next;
				    temp1=null;
				    }
				}catch(ArrayIndexOutOfBoundsException e) {
					System.out.println("Array is empty");
			}
		}
		public void deletAtStart() {
			Node node=new Node(data);
			node.next=null;
			Node temp=head;
			temp=temp.next;
			head=temp;
		}
		public void deletAtEnd() {
			Node node=new Node(data);
			node.next=null;
			Node temp=head;
			Node ptr=temp.next;
			while(ptr.next!=null) {
				temp=ptr;
				ptr=ptr.next;
			}
			temp.next=null;
		}
		public void display() {
			Node node=head;
			while(node.next!=null){
				System.out.println(node.data);
			node=node.next;
		}
		System.out.println(node.data);
		}
}
	
